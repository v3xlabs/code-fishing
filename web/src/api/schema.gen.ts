/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/party": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /party
         * @description Create a new party
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["PartyCreateRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["PartyCreateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/{party_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /party/:party_id
         * @description Get a party by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    party_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Party"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/{party_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /party/:party_id/events
         * @description Get events for a party
         */
        get: {
            parameters: {
                query?: {
                    cursor?: number;
                };
                header?: never;
                path: {
                    party_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["PartyEvent"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /party/:party_id/events
         * @description Submit an event to a party
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    party_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["PartyEventData"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["PartyEvent"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maps/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /maps/search
         * @description Search for maps
         */
        get: {
            parameters: {
                query: {
                    search: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maps/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /maps/get
         * @description Get a map by ID
         */
        get: {
            parameters: {
                query: {
                    map_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["MapResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/guest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /auth/guest
         * @description Sign in as a guest, this allows for anonymous access to the api
         *     This method of authentication comes with limited functionality notably:
         *     - No access to any server specific data
         *     - No access to steam specific data
         *     This is done to restrict load on the server to only authenticated users
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["GuestResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /auth/user
         * @description Get the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /auth/user/:user_id
         * @description Get a user by their user id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth/steam": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /auth/oauth/steam
         * @description Redirect to Steam login page
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/html; charset=utf-8": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth/steam/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /auth/oauth/steam/callback
         * @description Handle Steam OAuth callback
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain; charset=utf-8": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bm/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /bm/recent
         * @description Get the most recent rust servers for the authenticated user
         *     This uses the BattleMetrics API only works if the player's steam name is unique enough
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["BattleMetricsRecentServers"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /inventory/total
         * @description Get the total inventory value & size of the queried user
         */
        get: operations["get_total_inventory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * BattleMetricsRecentServer
         * @example {
         *       "bm_id": "123456789",
         *       "name": "MyRustServer 1000x | JUST WIPED (yesterday)",
         *       "styled_ip": "play.code.fishing",
         *       "players": 260,
         *       "status": "online",
         *       "tags": [
         *         "tags",
         *         "go",
         *         "here"
         *       ],
         *       "is_official": false,
         *       "rust_type": "modded",
         *       "gamemode": "standard",
         *       "map_name": "Custom Map",
         *       "header_url": "https://example.com/headerimage.png",
         *       "url": "https://example.com",
         *       "description": "Welcome to MyRustServer!\nWipe Schedule:\n• Fullwipes Every Friday at 17:45 CET\n• Map wipes Every Monday at 15:45 CET\n- Last Wipe: 24.03 15:45 CET Type: Map Wipe\n- Next Wipe: 28.03 17:45 CET Type: Full Wipe\n\nFeatures:\n- 2x gathering & loot\n- Max Group Size: 3\n- Shared Blueprints\n- Balanced kits & commands\n- Great anti-cheat + Active non-playing admins\n\nFor more info join our Discord or visit our website\nWebsite: https://example.com/\nDiscord: https://discord.gg/example",
         *       "last_seen": "2025-03-23T18:16:45.138Z",
         *       "first_seen": "2025-03-23T18:15:45.362Z",
         *       "time_played": 60,
         *       "online": false
         *     }
         */
        BattleMetricsRecentServer: {
            /** @description `id` from BattleMetrics */
            bm_id: string;
            name?: string;
            /** @description `address` from BattleMetrics */
            styled_ip?: string;
            /**
             * Format: uint64
             * @description online player count;
             */
            players?: number;
            /** @description subjective status */
            status?: string;
            tags?: string[];
            /** @description `official` from BattleMetrics */
            is_official?: boolean;
            /** @description ex 'official' */
            rust_type?: string;
            /** @description ex 'standard'; `rust_gamemode` from BattleMetrics */
            gamemode?: string;
            /** @description Map Name; ex 'Rustafied Custom Map'; `map` from BattleMetrics */
            map_name?: string;
            /** @description Header Image; `rust_headerimage` from BattleMetrics */
            header_url?: string;
            /** @description Url; `rust_url` from BattleMetrics */
            url?: string;
            /** @description description; `rust_description` from BattleMetrics */
            description?: string;
            /** @description Specific to the user */
            last_seen?: string;
            first_seen?: string;
            /** Format: uint64 */
            time_played?: number;
            online?: boolean;
        };
        /** BattleMetricsRecentServers */
        BattleMetricsRecentServers: {
            servers: components["schemas"]["BattleMetricsRecentServer"][];
        };
        /** GuestResponse */
        GuestResponse: {
            token: string;
            user: components["schemas"]["User"];
        };
        /** MapData */
        MapData: {
            id: string;
            _type: string;
            /** Format: uint64 */
            seed: number;
            /** Format: uint32 */
            size: number;
            /** Format: uint32 */
            save_version: number;
            image_url: string;
            title_base_url?: string;
            image_icon_url?: string;
            thumbnail_url?: string;
            underground_overlay_url?: string;
            building_block_area_url?: string;
            is_staging: boolean;
            is_custom_map: boolean;
            is_for_sale: boolean;
            is_featured: boolean;
            has_custom_monuments: boolean;
            can_download: boolean;
            download_url?: string;
            slug?: string;
            monuments: unknown[];
            extra: unknown;
        };
        /** MapMeta */
        MapMeta: {
            status: string;
            /** Format: uint32 */
            status_code: number;
        };
        /** MapResponse */
        MapResponse: {
            meta: components["schemas"]["MapMeta"];
            data: components["schemas"]["MapData"];
        };
        /** Party */
        Party: {
            party_id: string;
            owner_id: string;
            /** Format: date-time */
            created_at: string;
        };
        /** PartyCreateRequest */
        PartyCreateRequest: Record<string, never>;
        /** PartyCreateResponse */
        PartyCreateResponse: {
            id: string;
            created_at: string;
        };
        /** PartyEvent */
        PartyEvent: {
            party_id: string;
            /** Format: int32 */
            event_id: number;
            user_id: string;
            data: components["schemas"]["PartyEventData"];
            /** Format: date-time */
            created_at: string;
        };
        /**
         * PartyEventChatMessage
         * @description Represents a chat message sent by a user in the party
         */
        PartyEventChatMessage: {
            message: string;
        };
        /**
         * PartyEventCodesSubmitted
         * @description TODO: This event is unimplemented at this time
         */
        PartyEventCodesSubmitted: {
            user_id: string;
            codes: string[];
        };
        /**
         * PartyEventCreated
         * @description Auto generated event when a party is created
         */
        PartyEventCreated: {
            owner_id: string;
        };
        /**
         * PartyEventCursorUpdate
         * @description TODO: This event is unimplemented at this time
         */
        PartyEventCursorUpdate: {
            user_id: string;
            cursor: string;
            /** Format: uint32 */
            size: number;
        };
        PartyEventData: components["schemas"]["PartyEventData_PartyEventCreated"] | components["schemas"]["PartyEventData_PartyEventOwnerChanged"] | components["schemas"]["PartyEventData_PartyEventJoinLeave"] | components["schemas"]["PartyEventData_PartyEventCodesSubmitted"] | components["schemas"]["PartyEventData_PartyEventCursorUpdate"] | components["schemas"]["PartyEventData_PartyEventChatMessage"] | components["schemas"]["PartyEventData_PartyEventListOrderChanged"] | components["schemas"]["PartyEventData_PartyEventSettingChanged"];
        PartyEventData_PartyEventChatMessage: {
            /**
             * @example PartyChatMessage
             * @enum {string}
             */
            type: "PartyChatMessage";
        } & components["schemas"]["PartyEventChatMessage"];
        PartyEventData_PartyEventCodesSubmitted: {
            /**
             * @example PartyCodesSubmitted
             * @enum {string}
             */
            type: "PartyCodesSubmitted";
        } & components["schemas"]["PartyEventCodesSubmitted"];
        PartyEventData_PartyEventCreated: {
            /**
             * @example PartyCreated
             * @enum {string}
             */
            type: "PartyCreated";
        } & components["schemas"]["PartyEventCreated"];
        PartyEventData_PartyEventCursorUpdate: {
            /**
             * @example PartyCursorUpdate
             * @enum {string}
             */
            type: "PartyCursorUpdate";
        } & components["schemas"]["PartyEventCursorUpdate"];
        PartyEventData_PartyEventJoinLeave: {
            /**
             * @example PartyJoinLeave
             * @enum {string}
             */
            type: "PartyJoinLeave";
        } & components["schemas"]["PartyEventJoinLeave"];
        PartyEventData_PartyEventListOrderChanged: {
            /**
             * @example PartyListOrderChanged
             * @enum {string}
             */
            type: "PartyListOrderChanged";
        } & components["schemas"]["PartyEventListOrderChanged"];
        PartyEventData_PartyEventOwnerChanged: {
            /**
             * @example PartyOwnerChanged
             * @enum {string}
             */
            type: "PartyOwnerChanged";
        } & components["schemas"]["PartyEventOwnerChanged"];
        PartyEventData_PartyEventSettingChanged: {
            /**
             * @example PartySettingChanged
             * @enum {string}
             */
            type: "PartySettingChanged";
        } & components["schemas"]["PartyEventSettingChanged"];
        /**
         * PartyEventJoinLeave
         * @description TODO: This event is unimplemented at this time
         */
        PartyEventJoinLeave: {
            user_id: string;
            is_join: boolean;
        };
        /** PartyEventListOrderChanged */
        PartyEventListOrderChanged: {
            order: unknown[];
        };
        /**
         * PartyEventOwnerChanged
         * @description TODO: This event is unimplemented at this time
         */
        PartyEventOwnerChanged: {
            owner_id: string;
        };
        /** PartyEventSettingChanged */
        PartyEventSettingChanged: {
            setting: string;
            value: unknown;
        };
        /** SCMMTotalInventoryResponse */
        SCMMTotalInventoryResponse: {
            /** Format: uint64 */
            items: number;
            /** Format: uint64 */
            market_value: number;
            /** Format: int64 */
            market_movement_value: number;
            market_movement_time: string;
        };
        /** SearchMeta */
        SearchMeta: {
            status: string;
            /** Format: uint32 */
            status_code: number;
        };
        /** SearchResponse */
        SearchResponse: {
            meta: components["schemas"]["SearchMeta"];
            data: components["schemas"]["Server"][];
        };
        /** Server */
        Server: {
            name: string;
            map_id: string;
            ip: string;
            /** Format: uint16 */
            game_port: number;
            last_wipe_utc: string;
        };
        /**
         * User
         * @example {
         *       "user_id": "guest:ImvHRo4RUHSD2x",
         *       "name": "John D.",
         *       "avatar_url": "https://avatars.akamai.steamstatic.com/0000000000000000.jpg",
         *       "profile_url": "https://steamcommunity.com/id/john_doe",
         *       "created_at": "2025-04-03T15:03:07.630953033+00:00",
         *       "updated_at": "2025-04-03T15:03:07.630954883+00:00"
         *     }
         */
        User: {
            user_id: string;
            name: string;
            avatar_url?: string;
            profile_url?: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_total_inventory: {
        parameters: {
            query: {
                steam_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["SCMMTotalInventoryResponse"];
                };
            };
        };
    };
}
